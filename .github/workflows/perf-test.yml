name: MIGraphX Performance Tests

on:
  workflow_call:
    inputs:
      rocm_release:
        type: string
        description: ROCm release version
        required: true
      performance_reports_repo:
        type: string
        description: Result repository
        required: true
      result_number:
        type: string
        description: Number of last results
        required: true
      flags:
        type: string
        description: -m for Max value; -s for Std dev; -r 'path' for Threshold file
        required: true
    secrets:
      gh_token:
        description: 'Github Access Token'
        required: true
      mail_user:
        description: 'Email username'
        required: true
      mail_pass:
        description: 'Email password'
        required: true
env:
  UTILS_DIR: benchmark-utils
  DOCKERBASE: rocm-migraphx:${{ inputs.rocm_release }}
  MIOPENTUNE: miopen-dbs/rocm${{ inputs.rocm_release }}
  REPORTS_DIR: migraphx-reports
  MAIL_TO: dl.dl-migraphx-perfrun@amd.com
  MAIL_CC: igor.mirosavljevic@htecgroup.com,vidoje.gavrilovic@htecgroup.com,jovica.zlatanovic@htecgroup.com,stefan.micic@htecgroup.com
  MAIL_FROM: GH Actions
  MAIL_SUBJECT: GH Actions send email test
  MAIL_BODY: Testing GH Actions workflow
  PR_ID: ${{ github.event.number }}
  BRANCH_NAME: ${{ github.base_ref }}
  SAVED_MODELS_PATH: "/usr/share/migraphx/saved-models"
  REPORTS_PATH: "/usr/share/migraphx/reports"
  TEST_RESULTS_PATH: "/usr/share/migraphx/test-results"
  MIGRAPHX_PATH: "/usr/share/migraphx"

jobs:
  performance_test:
    name: MIGraphX Performance
    runs-on: self-hosted
    outputs:
      git_sha: ${{ steps.git_sha.outputs.git_sha }}
    steps:
      - name: Update PR env
        if: ${{ github.event_name == 'pull_request'}}
        run: |
          echo "BRANCH_NAME=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "TEST_RESULTS_PATH=$(echo "$TEST_RESULTS_PATH-$PR_ID")" >> $GITHUB_ENV
      
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Checkout utils
        uses: actions/checkout@v3
        with:
          repository: "migraphx-benchmark/benchmark-utils"
          path: ${{ env.UTILS_DIR }}
          token: ${{ secrets.gh_token }}
      
      - name: Get git SHA
        id: git_sha
        run: |
          cd $GITHUB_WORKSPACE
          SHA=$(git log | head -1 | awk '{print $2}' | cut -c 1-6)
          echo "::set-output name=git_sha::$SHA"
      
      - name: Docker build
        if: ${{ github.event.action != 'closed' }}
        run: >
          cd $GITHUB_WORKSPACE/${{ env.UTILS_DIR }} && docker build --no-cache
          --build-arg BRANCH=${{ env.BRANCH_NAME }} 
          --build-arg DOCKERBASE=${{ env.DOCKERBASE }}
          --build-arg MIOPENTUNE=${{ env.MIOPENTUNE }}
          -t "migraphx-rocm:${{ inputs.rocm_release }}-${{ steps.git_sha.outputs.git_sha }}" 
          -f dockerfiles/Daily.Dockerfile .
      
      - name: Run performance tests
        if: ${{ github.event.action != 'closed' }}
        run: >
          docker run -e TZ=America/Chicago
          -e TARGET=gpu
          --device=/dev/dri
          --device=/dev/kfd
          --network=host
          --group-add=video
          -v /usr/share/migraphx/saved-models:/saved-models:ro
          -v $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts:/migraphx/sh:ro
          -v ${{ env.TEST_RESULTS_PATH }}:/data/test-results
          --workdir /migraphx/sh
          migraphx-rocm:${{ inputs.rocm_release }}-${{ steps.git_sha.outputs.git_sha }} /bin/bash performance_tests.sh

      - name: Delete old images/containers
        if: ${{ github.event_name == 'schedule' }}
        run: |
          docker container prune -f
          if [[ $(docker images --filter=reference="migraphx-rocm:${{ inputs.rocm_release }}-*" | awk 'NR>1 {print $3}') ]]; then
            docker rmi -f $(docker images --filter=reference="migraphx-rocm:${{ inputs.rocm_release }}-*" | awk 'NR>1 {print $3}')
          fi
          docker image prune -f

      - name: Checkout report's repo
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.performance_reports_repo }}
          path: ${{ env.REPORTS_DIR }}
          token: ${{ secrets.gh_token }}

      - name: Execute report script
        if: ${{ github.event_name == 'schedule' }}
        run: |
          python3 $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts/report.py \
          -t '${{ env.TEST_RESULTS_PATH }}' \
          -r '${{ env.REPORTS_PATH }}'
          
          cp -r ${{ env.REPORTS_PATH }}/* $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/

          cd $GITHUB_WORKSPACE/${{ env.REPORTS_DIR }}/
          git add .
          git config --local user.email github-actions
          git config --local user.name github-actions@github.com
          git commit -m "Push report" -a
          git push

      - name: Execute comment script
        id: auto_comment
        if: ${{ github.event_name != 'schedule' && github.event_name == 'pull_request' && github.event.action != 'closed'}} 
        run: |
          if [ ${{ inputs.flags }} == "-r" ]; then
            flagoptions="${{ inputs.flags }} $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts/"
          else
            flagoptions="${{ inputs.flags }}"
          fi 
          python3 $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts/comment.py -t ${TEST_RESULTS_PATH//-$PR_ID/} -n ${{ inputs.result_number }} $flagoptions -p

      - name: Create a comment on PR
        if: ${{ github.event_name != 'schedule' && github.event_name == 'pull_request' && github.event.action != 'closed'}}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
          path: ${{ github.workspace }}/${{ env.UTILS_DIR }}/scripts/temp.md

      - name: Get latest report
        id: last_report
        if: ${{ github.event_name == 'schedule' }}
        run: |
          cd ${{ env.REPORTS_PATH }}
          latest="$(readlink -f $(ls -tp | grep -v /$ | head -1))"
          echo "::set-output name=latest::$latest"

      - name: Send mail
        if: ${{ github.event_name == 'schedule' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.mail_user }}
          password: ${{ secrets.mail_pass }}
          subject: ${{ env.MAIL_SUBJECT }}
          to: ${{ env.MAIL_TO }}
          from: ${{ env.MAIL_FROM }}
          secure: true
          body: ${{ env.MAIL_BODY }}
          cc: ${{ env.MAIL_CC }}
          ignore_cert: true
          attachments: ${{ steps.last_report.outputs.latest}}
          priority: normal

      - name: Clean merged PR data
        if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == true}}
        run: >
          docker run
          -v $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts:/migraphx/sh:ro
          -v ${{ env.MIGRAPHX_PATH }}:/data/migraphx
          --workdir /migraphx/sh
          rocm-migraphx:${{ inputs.rocm_release }} bash -c "./clean_after_pr.sh ${{ env.TEST_RESULTS_PATH }} ${{ env.PR_ID }} merged"
      
      - name: Clean closed PR data
        if: ${{ github.event.action == 'closed' && github.event.pull_request.merged == false}}
        run: >
          docker run
          -v $GITHUB_WORKSPACE/${{ env.UTILS_DIR }}/scripts:/migraphx/sh:ro
          -v ${{ env.MIGRAPHX_PATH }}:/data/migraphx
          --workdir /migraphx/sh
          rocm-migraphx:${{ inputs.rocm_release }} bash -c "./clean_after_pr.sh ${{ env.TEST_RESULTS_PATH }} ${{ env.PR_ID }} closed"
